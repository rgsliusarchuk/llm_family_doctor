#!/usr/bin/env python
"""Example Telegram bot for LLM Family Doctor API using the new assistant fa√ßade endpoint."""
import os
import sys
import logging
import asyncio
from pathlib import Path
from typing import Optional, Dict, Any

# Add current directory to Python path for imports
sys.path.append(str(Path(__file__).parent))

from dotenv import load_dotenv
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes
)

# ‚îÄ‚îÄ Load environment variables ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()

# ‚îÄ‚îÄ Configuration ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000")

# ‚îÄ‚îÄ Configure logging ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ API client ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class APIClient:
    """Client for the LLM Family Doctor API using the assistant fa√ßade."""
    
    def __init__(self, base_url: str = API_BASE_URL):
        self.base_url = base_url.rstrip('/')
    
    async def health_check(self) -> bool:
        """Check if API is healthy."""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.base_url}/health") as response:
                    if response.status == 200:
                        data = await response.json()
                        return data.get("status") == "healthy"
                    return False
        except Exception as e:
            logger.error(f"Health check failed: {e}")
            return False
    
    async def send_message(
        self, 
        text: str,
        user_id: str,
        chat_id: str
    ) -> Optional[dict]:
        """Send message to assistant fa√ßade endpoint."""
        try:
            payload = {
                "text": text,
                "user_id": user_id,
                "chat_id": chat_id
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/assistant/message",
                    json=payload
                ) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        error_text = await response.text()
                        logger.error(f"API error: {response.status} - {error_text}")
                        return None
        except Exception as e:
            logger.error(f"Error calling API: {e}")
            return None

# Global API client
api_client = APIClient()

# ‚îÄ‚îÄ Bot handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command."""
    welcome_message = """
ü§ñ **–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ LLM Family Doctor!**

–Ø - –≤–∞—à –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π –º–æ–∂–µ:

üè• **–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ–Ω—ñ–∫—É** - –∞–¥—Ä–µ—Å–∞, –≥–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏, –ø–æ—Å–ª—É–≥–∏
üë®‚Äç‚öïÔ∏è **–†–æ–∑–∫–ª–∞–¥ –ª—ñ–∫–∞—Ä—ñ–≤** - –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Ç–∞ –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏
ü©∫ **–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –¥—ñ–∞–≥–Ω–æ–∑** - –∞–Ω–∞–ª—ñ–∑ —Å–∏–º–ø—Ç–æ–º—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –º–µ–¥–∏—á–Ω–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª—ñ–≤

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º!

**–ü—Ä–∏–∫–ª–∞–¥–∏:**
‚Ä¢ "–î–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤–∞—à–∞ –∫–ª—ñ–Ω—ñ–∫–∞?"
‚Ä¢ "–ö–æ–ª–∏ –ø—Ä–∞—Ü—é—î –¥–æ–∫—Ç–æ—Ä –Ü–≤–∞–Ω–æ–≤?"
‚Ä¢ "–£ –º–µ–Ω–µ –≥–æ–ª–æ–≤–Ω–∏–π –±—ñ–ª—å —ñ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"
‚Ä¢ "–ú–æ—è –¥–∏—Ç–∏–Ω–∞ –∫–∞—à–ª—è—î"

/help - –¥–æ–≤—ñ–¥–∫–∞
/status - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—É
"""
    
    await update.message.reply_text(
        welcome_message,
        parse_mode='Markdown'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /help command."""
    help_message = """
üìã **–î–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

/start - –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É
/help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞
/status - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—É

**–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:**

1. **–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ–Ω—ñ–∫—É:**
   - "–î–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∫–ª—ñ–Ω—ñ–∫–∞?"
   - "–Ø–∫—ñ –≥–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏?"
   - "–Ø–∫—ñ –ø–æ—Å–ª—É–≥–∏ –Ω–∞–¥–∞—î—Ç–µ?"

2. **–†–æ–∑–∫–ª–∞–¥ –ª—ñ–∫–∞—Ä—ñ–≤:**
   - "–ö–æ–ª–∏ –ø—Ä–∞—Ü—é—î –¥–æ–∫—Ç–æ—Ä –ü–µ—Ç—Ä–µ–Ω–∫–æ?"
   - "–†–æ–∑–∫–ª–∞–¥ –¥–æ–∫—Ç–æ—Ä–∞ –Ü–≤–∞–Ω–æ–≤–∞"
   - "–î–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –ª—ñ–∫–∞—Ä—è 123"

3. **–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –¥—ñ–∞–≥–Ω–æ–∑:**
   - "–£ –º–µ–Ω–µ –≥–æ–ª–æ–≤–Ω–∏–π –±—ñ–ª—å"
   - "–î–∏—Ç–∏–Ω–∞ –º–∞—î —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É"
   - "–í—ñ–¥—á—É–≤–∞—é –±—ñ–ª—å —É –∂–∏–≤–æ—Ç—ñ"

‚ö†Ô∏è **–í–∞–∂–ª–∏–≤–æ:** –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –¥—ñ–∞–≥–Ω–æ–∑ –Ω–µ –∑–∞–º—ñ–Ω—é—î –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –∑ –ª—ñ–∫–∞—Ä–µ–º!
"""
    
    await update.message.reply_text(
        help_message,
        parse_mode='Markdown'
    )

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /status command."""
    if await api_client.health_check():
        status_message = "‚úÖ API —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
    else:
        status_message = "‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
    
    await update.message.reply_text(status_message)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle all text messages using the assistant fa√ßade."""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    message_text = update.message.text
    
    # Check if API is healthy
    if not await api_client.health_check():
        await update.message.reply_text("‚ùå –°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    
    # Send typing indicator
    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    
    # Send message to assistant fa√ßade
    result = await api_client.send_message(
        text=message_text,
        user_id=str(user_id),
        chat_id=str(chat_id)
    )
    
    if not result:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    
    intent = result.get("intent")
    data = result.get("data", {})
    
    # Handle different intents
    if intent == "clinic_info":
        # Format clinic information
        clinic_info = f"""
üè• **–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ–Ω—ñ–∫—É:**

üìç **–ê–¥—Ä–µ—Å–∞:** {data.get('address', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
üïí **–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏:** {data.get('opening_hours', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
üìã **–ü–æ—Å–ª—É–≥–∏:** {data.get('services', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
"""
        if data.get('phone'):
            clinic_info += f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {data['phone']}\n"
        
        await update.message.reply_text(clinic_info, parse_mode='Markdown')
    
    elif intent == "doctor_schedule":
        # Format doctor schedule
        doctor_info = f"""
üë®‚Äç‚öïÔ∏è **–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ª—ñ–∫–∞—Ä—è:**

üë§ **–ü–Ü–ë:** {data.get('full_name', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
üè• **–ü–æ—Å–∞–¥–∞:** {data.get('position', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
üìÖ **–†–æ–∑–∫–ª–∞–¥:** {data.get('schedule', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
"""
        await update.message.reply_text(doctor_info, parse_mode='Markdown')
    
    elif intent == "diagnose":
        # Handle diagnosis with approval buttons
        diagnosis = data.get("diagnosis", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥—ñ–∞–≥–Ω–æ–∑")
        symptoms_hash = data.get("symptoms_hash", "")
        
        # Create doctor review buttons
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{symptoms_hash}"),
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_{symptoms_hash}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Send diagnosis with doctor review buttons
        await update.message.reply_text(
            f"ü©∫ **–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –¥—ñ–∞–≥–Ω–æ–∑:**\n\n{diagnosis}\n\n"
            f"‚ö†Ô∏è –¶–µ –ª–∏—à–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –¥—ñ–∞–≥–Ω–æ–∑. –ö–æ–Ω—Å—É–ª—å—Ç—É–π—Ç–µ—Å—å –∑ –ª—ñ–∫–∞—Ä–µ–º.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    else:
        # Fallback for unknown intent
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏.")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button callbacks for doctor review."""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    action, request_id = data.split('_', 1)
    
    # For now, we'll use a default doctor ID (in production, get from user context)
    doctor_id = 1  # Default doctor ID
    
    if action == "approve":
        # Approve the diagnosis
        # Note: This would need to be implemented in the assistant router
        await query.edit_message_text(
            "‚úÖ –î—ñ–∞–≥–Ω–æ–∑ —Å—Ö–≤–∞–ª–µ–Ω–æ –ª—ñ–∫–∞—Ä–µ–º!"
        )
    
    elif action == "edit":
        # For editing, we'll need to implement a more complex flow
        # For now, just acknowledge the edit request
        await query.edit_message_text(
            "‚úèÔ∏è –§—É–Ω–∫—Ü—ñ—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó."
        )
    
    else:
        await query.edit_message_text(
            "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è."
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle errors."""
    logger.error(f"Update {update} caused error {context.error}")

# ‚îÄ‚îÄ Main function ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    """Start the Telegram bot."""
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN not found in environment variables")
        sys.exit(1)
    
    print("ü§ñ Starting LLM Family Doctor Telegram Bot (Assistant Fa√ßade)...")
    print(f"üåê API URL: {API_BASE_URL}")
    print("üîß Press Ctrl+C to stop the bot")
    print("-" * 50)
    
    # Create application
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # Add handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    # Add error handler
    application.add_error_handler(error_handler)
    
    # Start the bot
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except KeyboardInterrupt:
        print("\nüëã Telegram bot stopped.")
    except Exception as e:
        logger.error(f"Error running bot: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 