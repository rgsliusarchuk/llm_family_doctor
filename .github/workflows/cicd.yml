name: Deploy to EC2
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions: 
      contents: read
      id-token: write
    outputs:
      IMG_URI: ${{ steps.export-image-uri.outputs.IMG_URI }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Set image tag
        run: echo "TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV
        
      - name: Build image
        run: docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${TAG} .
        
      - name: Push image
        run: docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${TAG}
        
      - name: Export image uri
        id: export-image-uri
        run: echo "IMG_URI=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${TAG}" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Pull & restart on EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Login to ECR
            docker login ${{ steps.login-ecr.outputs.registry }} -u AWS -p $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }})
            
            # Navigate to app directory
            cd /srv/familydoc
            
            # Update docker-compose.yml with new image
            IMAGE=${{ needs.build-and-push.outputs.IMG_URI }}
            sed -i "s|image:.*|image: ${IMAGE}|" docker-compose.yml
            
            # Pull new image and restart services
            docker compose pull
            docker compose up -d --remove-orphans
            
            # Wait for services to be healthy
            sleep 10
            
            # Test health endpoint
            if curl -f http://localhost/health; then
              echo "‚úÖ Deployment successful - health check passed"
            else
              echo "‚ùå Deployment failed - health check failed"
              exit 1
            fi

  smoke-test:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests
          
      - name: Run smoke tests
        env:
          API_BASE: http://${{ secrets.EC2_HOST }}
        run: |
          echo "üß™ Running smoke tests against ${{ secrets.EC2_HOST }}..."
          python -m pytest tests/test_smoke.py -m ci -v 